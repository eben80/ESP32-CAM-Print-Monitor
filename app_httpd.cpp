// Copyright 2015-2016 Espressif Systems (Shanghai) PTE LTD
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//URL details:
//  /control?var=framesize&val=0

#include "esp_http_server.h"
#include "esp_camera.h"
#include "Arduino.h"
#include <ArduinoJson.h>

#define ledPin 4     //Pin for built-in LED flash
#define RELAY_PIN 13 //Relay Pin for Printer Mains Relay

//Start Config
// String verNum = "V0.9";
uint8_t debugmsg = 1;                                                                                                                 //Debug Serial Messages
int PrintSerial_Speed = 250000;                                                                                                       //Speed for Serial connection to Printer - Ender 3 default is 115200
#define SERIAL1_RXPIN 14                                                                                                              //Serial Pin for PrinterSerial
#define SERIAL1_TXPIN 15                                                                                                              //Serial Pin for PrinterSerial
String abortString = "M117 Print Aborted\nM25\nM410\nG91\nG0 Z10\n\nG0 E-5\nM400\nG90\nM104 S0\nM140 S0\nM106 S0\nG0 X0 Y220\nM18\n"; //GCode for doing an aborting a print.
//End Config

#ifdef __cplusplus
extern "C"
{
#endif

    uint8_t temprature_sens_read();

#ifdef __cplusplus
}
#endif

uint8_t temprature_sens_read();

unsigned char h2int(char c)
{
    if (c >= '0' && c <= '9')
    {
        return ((unsigned char)c - '0');
    }
    if (c >= 'a' && c <= 'f')
    {
        return ((unsigned char)c - 'a' + 10);
    }
    if (c >= 'A' && c <= 'F')
    {
        return ((unsigned char)c - 'A' + 10);
    }
    return (0);
}

String urldecode(String str)
{

    String encodedString = "";
    char c;
    char code0;
    char code1;
    for (int i = 0; i < str.length(); i++)
    {
        c = str.charAt(i);
        if (c == '+')
        {
            encodedString += ' ';
        }
        else if (c == '%')
        {
            i++;
            code0 = str.charAt(i);
            i++;
            code1 = str.charAt(i);
            c = (h2int(code0) << 4) | h2int(code1);
            encodedString += c;
        }
        else
        {

            encodedString += c;
        }

        yield();
    }

    return encodedString;
}

#define index_ov2640_html_gz_len 21953
const uint8_t index_ov2640_html_gz[] = {
    0x1f,0x8b,0x08,0x08,0xca,0x51,0x33,0x5e,0x00,0xff,0x69,0x6e,0x64,0x65,0x78,0x2e,0x68,0x74,0x6d,0x6c,0x2e,0x67,0x7a,0x00,0xdd,0x5c,0x7b,0x93,0xdb,0x36,0x92,0xff,0xdf,0x9f,0x82,0xe1,0x24,0x1e,0xb9,0x3c,0x7a,0xce,0x78,0x32,0x56,0x46,0xda,0x4b,0xbc,0x4e,0xd6,0x57,0xeb,0xac,0xcb,0xf6,0x56,0xdd,0xd5,0xdd,0xd5,0x15,0x45,0x42,0x12,0x6d,0x8a,0xe4,0x11,0xe4,0x68,0x66,0xb7,0xfc,0xdd,0xf7,0x87,0x07,0x29,0x10,0x04,0x5f,0x1a,0x39,0x97,0x5d,0x49,0x25,0x89,0x24,0xd0,0x68,0x34,0xfa,0x8d,0x26,0x6f,0xbf,0xf1,0x22,0x37,0x7d,0x88,0x89,0xb5,0x4d,0x77,0xc1,0xf2,0xc9,0xad,0xf8,0xc1,0x2f,0x71,0xbc,0xe5,0x13,0x0b,0xaf,0xdb,0x1d,0x49,0x1d,0xcb,0xdd,0x3a,0x09,0x25,0xe9,0xc2,0xce,0xd2,0xf5,0xf0,0xc6,0x56,0x2f,0x85,0xce,0x8e,0x2c,0xec,0x3b,0x9f,0xec,0xe3,0x28,0x49,0x6d,0xcb,0x8d,0xc2,0x94,0x84,0x68,0xba,0xf7,0xbd,0x74,0xbb,0xf0,0xc8,0x9d,0xef,0x92,0x21,0x3f,0xb8,0xf0,0x43,0x3f,0xf5,0x9d,0x60,0x48,0x5d,0x27,0x20,0x8b,0x69,0x0e,0x27,0xf5,0xd3,0x80,0x2c,0x5f,0x7f,0x78,0x77,0x39,0x1b,0xbe,0xfa,0xf1,0xad,0xf5,0x2e,0xf1,0xc3,0xd4,0x7a,0x1b,0xa1,0x75,0x94,0xdc,0x8e,0xc5,0x65,0xd1,0x94,0xa6,0x0f,0xf9,0x7f,0xf6,0x5a,0x45,0xde,0x83,0xf5,0xf7,0xe2,0x90,0xbd,0xd6,0x18,0x7f,0xb8,0x76,0x76,0x7e,0xf0,0x30,0xb7,0x7e,0x4c,0x30,0xdc,0x85,0xf5,0x27,0x12,0xdc,0x91,0xd4,0x77,0x9d,0x0b,0x8b,0x3a,0x21,0x1d,0x52,0x92,0xf8,0xeb,0x1f,0x4a,0xdd,0x56,0x8e,0xfb,0x79,0x93,0x44,0x59,0xe8,0xcd,0xad,0xb3,0xe9,0x0d,0x7b,0x97,0x1b,0xb8,0x51,0x10,0x25,0xb8,0x46,0xd6,0xec,0x5d,0xbe,0xc6,0xc7,0xa4,0xfe,0xdf,0xc8,0xdc,0x9a,0x5e,0xc7,0xf7,0xc5,0xb5,0x2f,0x4f,0x8a,0xbf,0xdb,0x99,0x09,0x4f,0xd9,0xe7,0xc6,0xdc,0xe7,0x6c,0x47,0xc2,0xec,0xa2,0x38,0xa4,0xc4,0x4d,0xfd,0x28,0x1c,0xed,0x1c,0x3f,0xd4,0x81,0x05,0xe4,0x7e,0xe8,0xf9,0x89,0x68,0x31,0x67,0xc8,0x66,0xbb,0xd0,0x04,0xb3,0x01,0x88,0xe7,0xd3,0x38,0x70,0x40,0x35,0x06,0xad,0x16,0x9f,0xba,0x4e,0x61,0x14,0x12,0x8d,0x2a,0x0c,0xa9,0x7d,0xe2,0xc4,0xec,0x22,0xfb,0x2d,0x5f,0xde,0xf9,0xa1,0x60,0x8b,0xb9,0x75,0x79,0x35,0x89,0xef,0x1b,0xd6,0xe3,0xfa,0xfa,0xba,0x7c,0x35,0x76,0x3c,0xcf,0x0f,0x37,0x73,0x0b,0x94,0xd3,0xfa,0x45,0x89,0x47,0x92,0x61,0xe2,0x78,0x7e,0x46,0xe7,0xd6,0x95,0x7e,0x7d,0xe7,0x24,0x1b,0x0c,0x9c,0x46,0xc0,0x6a,0x38,0xad,0x0c,0x2b,0x2f,0x27,0xfe,0x66,0x9b,0x62,0x61,0x70,0xdd,0x48,0x08,0xc9,0xe4,0x4d,0x04,0xac,0xa5,0x45,0x95,0x12,0x4e,0xe0,0x6f,0xc2,0xa1,0x9f,0x92,0x1d,0x30,0xa6,0x69,0x42,0x52,0x77,0x6b,0x1a,0x76,0xed,0x6f,0xb2,0x84,0x68,0x83,0x16,0xa4,0x98,0x98,0x66,0x52,0x39,0x3d,0xdc,0x93,0xd5,0x67,0x3f,0x1d,0xca,0x89,0xae,0xc8,0x3a,0x4a,0xc0,0x82,0xc6,0xce,0xc3,0x55,0x10,0xb9,0x9f,0x87,0x34,0x75,0x12,0x10,0xa3,0x19,0x90,0xb3,0x4e,0x09,0xc4,0xa3,0x09,0x0e,0x61,0x6b,0xd9,0x0c,0xc5,0x3c,0x94,0xbc,0xe8,0x87,0x81,0x1f,0x92,0x6e,0xe8,0x98,0xc6,0x2a,0x83,0x11,0x2d,0x1a,0xc8,0xec,0xef,0x36,0x75,0xeb,0xcb,0xe7,0x53,0x06,0x2e,0x39,0x79,0x3a,0x99,0x7c,0x57,0xbe,0xb0,0x25,0x82,0x97,0x9c,0x2c,0x8d,0x8e,0x67,0xd5,0x1a,0x0d,0xf1,0x6f,0x3b,0xe2,0xf9,0x8e,0x35,0x38,0xc8,0xd2,0xcd,0x04,0x3c,0xfb,0xcc,0x72,0x42,0xcf,0x1a,0x44,0x89,0x0f,0x26,0x75,0xb8,0x4a,0x08,0x70,0x06,0x6a,0x37,0x26,0xcf,0xb4,0x49,0xd5,0xf0,0x72,0x0b,0x3f,0x77,0x90,0xef,0x56,0xce,0xd6,0xe6,0xd2,0x48,0xfa,0x36,0xf2,0x0b,0x7a,0x01,0x9d,0xba,0x65,0xc8,0x1b,0xe4,0xcb,0x01,0x0b,0xe4,0x0e,0xd0,0xec,0x6e,0x6b,0x0d,0x2d,0xa6,0x7e,0x9e,0x55,0xdb,0x4b,0x60,0xd5,0x95,0xd3,0xd7,0xb5,0xc3,0x94,0xaa,0xd3,0xa9,0x13,0xdc,0x06,0xe1,0xed,0x2e,0xc0,0x1d,0x85,0xb8,0xb3,0x20,0x77,0x12,0xe6,0xce,0x02,0xdd,0x55,0xa8,0x3b,0x0a,0x76,0xab,0x70,0x8b,0x65,0xa9,0xb7,0x86,0x67,0xab,0x2c,0x4d,0xa3,0x90,0x1e,0xa5,0xcf,0x4d,0xbc,0xff,0x29,0xa3,0xa9,0xbf,0x7e,0x18,0x4a,0xd9,0x02,0xef,0xc7,0x0e,0xbc,0xa0,0x15,0x49,0xf7,0x84,0x18,0xed,0xf2,0x59,0xe8,0xdc,0x41,0xd4,0x37,0x9b,0x40,0xe7,0x15,0x37,0x4b,0x28,0xf3,0x3c,0xe2,0x08,0x5e,0x11,0x49,0xca,0x03,0x95,0x65,0xa2,0x05,0xf0,0xd0,0x5d,0x69,0xb0,0xa3,0x2c,0x65,0xf4,0xaa,0x50,0x34,0x02,0xba,0x7e,0x0a,0xb0,0xda,0x79,0x29,0x11,0xda,0xd9,0x5c,0x14,0x8c,0xda,0xb4,0x3c,0xfe,0xdc,0xdd,0x12,0xf7,0x33,0xf1,0x9e,0x37,0xfa,0x12,0x55,0x7a,0xd7,0xca,0xb5,0x22,0xf4,0xdf,0xdf,0xd4,0x98,0xeb,0x91,0x1f,0xc6,0x59,0x3a,0x64,0xee,0x44,0x7c,0xb2,0x25,0xe6,0x7c,0x96,0xcf,0x7c,0x36,0x33,0x2b,0xef,0xb9,0xf5,0x22,0xbe,0x37,0xd3,0x45,0x45,0x6a,0x19,0x38,0x2b,0x12,0xd4,0xa1,0x26,0x79,0xda,0xa0,0xf5,0xa4,0x0a,0x51,0xdd,0x95,0x5a,0x1f,0xeb,0xea,0xfb,0xef,0x5a,0x69,0xc3,0xff,0x1f,0x1c,0xce,0xd2,0x35,0x4a,0x02,0x08,0x8b,0xc9,0xef,0xc4,0xf5,0x3d,0x06,0x37,0x42,0x4f,0x9c,0x70,0x43,0x20,0xbb,0xf7,0x0a,0x54,0x79,0xae,0xde,0xff,0x6c,0x9d,0x30,0x58,0x8d,0x11,0xd6,0x34,0xa2,0x90,0xe4,0x1e,0x86,0x5b,0x59,0xa8,0xda,0xb1,0xa6,0x95,0xe5,0x15,0xb6,0xbb,0x22,0x09,0x65,0xa6,0xa8,0x38,0xa7,0x8d,0xa2,0x9c,0x07,0x18,0xeb,0x75,0x53,0x68,0xb2,0x5e,0x5f,0x4e,0x2e,0xaf,0x1a,0x1d,0x89,0xca,0x4c,0xb4,0xf0,0x44,0x13,0xf5,0x42,0x05,0xd4,0x93,0x73,0xbe,0x8d,0xee,0x48,0xa2,0x11,0x55,0x43,0xeb,0xea,0xe5,0x95,0xd7,0x00,0xc1,0x81,0xa2,0xbd,0xd3,0x55,0x5b,0x19,0xc4,0x6c,0xea,0xce,0x8c,0x5c,0x24,0x40,0x8c,0xb0,0x8a,0xce,0x2a,0x20,0x5e,0x8d,0x7e,0xf4,0xc8,0xda,0xc9,0x82,0xb4,0x81,0x76,0xce,0x84,0xbd,0x4d,0x23,0x70,0x46,0xff,0x2f,0x16,0x09,0x2f,0x38,0x77,0xfe,0x8f,0x36,0x46,0x6e,0x84,0x9c,0x38,0x26,0x0e,0x5a,0xb8,0xa0,0x57,0x35,0xe0,0x69,0xf5,0x01,0xab,0x6a,0xa2,0x84,0xdf,0xe5,0x35,0x7b,0xf7,0x60,0x99,0xc2,0x4d,0xe8,0x34,0xa7,0xf9,0x3a,0x72,0x33,0xdd,0xc6,0x35,0x2f,0x7f,0x15,0xc6,0x3c,0x27,0x05,0x0d,0x7c,0xce,0x74,0x59,0x18,0xb2,0x55,0x19,0xa6,0x09,0xa6,0xa2,0x01,0x6f,0x27,0x48,0x2f,0x09,0x29,0x11,0xcb,0x14,0x87,0x6b,0x82,0xa0,0x09,0x67,0x21,0xb3,0x16,0x8d,0x80,0x7c,0x0e,0xe2,0xb8,0x79,0xa7,0xdb,0x6c,0xa7,0x5b,0xd3,0x7c,0x80,0x29,0x74,0xbe,0x18,0x02,0x44,0x09,0x61,0xfa,0x13,0xf8,0x00,0x5d,0x39,0x42,0xd2,0xcc,0xc0,0x2a,0x9a,0x94,0x37,0x87,0xcc,0x26,0x3d,0xd1,0x48,0xdc,0x6e,0x2c,0x5e,0x0e,0x9f,0xa7,0xa3,0x1a,0x2d,0x5c,0xc3,0x7b,0xfd,0xb8,0xc7,0xb0,0xdc,0x5d,0xd7,0x6a,0x17,0xfd,0x0d,0x84,0x62,0x66,0xe6,0x5f,0x9e,0x2d,0x95,0xa9,0xfe,0xf3,0xb3,0x64,0xe7,0x49,0xd3,0xdf,0x7a,0x61,0x27,0xe6,0x65,0x83,0x87,0xcf,0xad,0x76,0x2d,0x55,0xab,0xd7,0x7b,0xcc,0x71,0xed,0x07,0xc1,0x30,0x88,0xf6,0xcd,0xb6,0xb7,0x9e,0xe5,0x2a,0x4c,0xd5,0xcc,0x97,0x7d,0x31,0xcb,0xa0,0x2a,0x7e,0x77,0x98,0x3d,0x52,0x0a,0xfe,0xbf,0xd4,0xaf,0xc2,0xa1,0xfd,0x14,0x6a,0x4f,0x36,0x39,0x0e,0x78,0xeb,0x4a,0x0b,0xd7,0xc5,0x18,0x02,0xd0,0xbd,0x8f,0xac,0x8f,0xd6,0xb9,0x25,0x7a,0xea,0x90,0x50,0xcf,0xe1,0x72,0xe4,0x7f,0xfb,0xb0,0x76,0x24,0x2c,0x98,0x12,0xd6,0x88,0x13,0x73,0x91,0x90,0x31,0x2b,0xa6,0x2a,0xd3,0x34,0x78,0x86,0x65,0x7e,0xab,0x36,0x30,0x86,0x4b,0x0d,0xa8,0x9a,0x31,0xab,0xb0,0xb5,0xa6,0x39,0xb9,0xa5,0xbf,0xac,0xc4,0x46,0x11,0xc5,0x4e,0x0e,0xdb,0x69,0x70,0x56,0x10,0xa8,0x2c,0xd5,0xdc,0x84,0x22,0xef,0x61,0xdb,0xe6,0xf9,0x4e,0x2b,0x41,0x4a,0xae,0xbb,0x2b,0x17,0x02,0xb2,0x46,0x87,0x4a,0x76,0x74,0x15,0x21,0x28,0xd8,0x99,0x2e,0x14,0x7c,0x99,0x2b,0xe7,0x6a,0x48,0x95,0xbb,0x21,0x5c,0x0d,0xc8,0x99,0x8c,0xae,0xa8,0x36,0xf5,0xf2,0xc5,0x5a,0xc9,0x29,0x72,0x1a,0x92,0xd0,0xb5,0x72,0x52,0xe0,0x33,0x9b,0xbe,0xbc,0x5e,0x5f,0x76,0x06,0x68,0x5e,0xb9,0xd2,0x1c,0x70,0x1d,0xb4,0xe0,0x7f,0x03,0x27,0x25,0xff,0x31,0x98,0x41,0x6c,0xb4,0x94,0xa6,0xb4,0x9a,0xdd,0x1a,0x37,0x34,0x34,0x27,0xd2,0x0c,0xd9,0x81,0xaa,0xda,0x35,0x86,0x38,0xaa,0xb0,0x57,0x56,0xb3,0x5e,0x40,0xea,0x84,0xbc,0x1a,0x0d,0x9b,0xf3,0x1e,0x3b,0x07,0x3e,0x13,0x63,0x54,0xec,0x84,0x55,0x16,0xed,0xc0,0xe0,0x09,0xc1,0xd4,0x11,0xba,0xd6,0x26,0x56,0xa6,0xd7,0x75,0x69,0x27,0x07,0xa8,0xa4,0xab,0x34,0x54,0x94,0x44,0xcc,0xb4,0x34,0x4e,0xd5,0x0e,0x67,0x96,0x27,0x99,0xe0,0xa9,0xc8,0x06,0x97,0xce,0xca,0xd9,0x2a,0xc7,0x25,0x9b,0x95,0x33,0x98,0xbd,0x78,0x71,0x61,0x5d,0xdd,0x5c,0x58,0x2f,0x66,0x17,0xd6,0xe8,0x85,0xb6,0xe0,0xb5,0xb2,0x92,0x92,0x7b,0x44,0x05,0x2c,0x91,0x8f,0xac,0x39,0x84,0xda,0xec,0xa5,0xd5,0xcd,0x8c,0x63,0xc8,0xf2,0xeb,0xc6,0x4e,0x2b,0xe2,0x61,0x6f,0x20,0x56,0x08,0x04,0x6a,0xc7,0x14,0x67,0xfd,0x1d,0x51,0xcf,0xde,0xa7,0x5a,0xbb,0x38,0x89,0x36,0x3c,0x6b,0xa6,0x9c,0x73,0x21,0x3b,0x68,0x75,0x9a,0x0d,0x61,0x95,0x2b,0x2b,0x6a,0xbb,0x6d,0xbd,0x84,0xce,0x7a,0xdc,0x72,0x4d,0xaf,0x26,0x17,0xd6,0x74,0x7a,0x25,0xbf,0x4e,0xbe,0x60,0x3d,0x69,0x6f,0x5a,0xd7,0x19,0x0c,0x43,0x57,0xd8,0xf5,0x50,0xda,0xb8,0xc3,0xd4,0xa7,0x56,0xe6,0xcc,0x3c,0x20,0xf6,0xd0,0xea,0xfa,0x6c,0x7d,0xcf,0x23,0xb5,0x39,0x43,0x16,0x04,0x1b,0xbb,0x81,0xc2,0xdb,0x94,0xee,0x4f,0x29,0xca,0x37,0xd5,0xd3,0x95,0xc5,0x34,0xb0,0x69,0x17,0xee,0x36,0x7b,0x06,0xd8,0x92,0x73,0x76,0xa7,0x9d,0xc3,0xf4,0xb2,0x22,0x2e,0x5f,0x79,0x12,0x26,0x07,0xb3,0x4d,0x81,0x77,0x48,0x36,0x4b,0xfd,0xce,0x58,0xcd,0x6c,0x93,0x2e,0x61,0xad,0x1a,0x1c,0xae,0x9e,0x44,0x6d,0x0c,0x0f,0x38,0x65,0xf5,0x64,0x33,0x57,0x32,0xda,0x49,0xb9,0x34,0x15,0x9b,0x28,0x9c,0x25,0xfd,0x74,0xd5,0x35,0x71,0x5d,0xf7,0x6b,0xba,0x4a,0x3c,0xb0,0xa8,0x73,0x94,0xa2,0xfb,0x21,0xdd,0x3a,0x1e,0xdb,0x4d,0x40,0xb8,0xcd,0xdd,0x86,0x06,0x57,0x49,0x02,0x19,0x71,0xfc,0x9b,0xbd,0xda,0x96,0x85,0x12,0x20,0xba,0xfa,0xc7,0x0a,0x20,0x5e,0x92,0x34,0x56,0x6a,0x92,0x6e,0xa9,0x9b,0xf8,0x71,0x6a,0xd1,0xc4,0x5d,0xd8,0xdb,0x34,0x8d,0xe9,0x7c,0x3c,0x76,0x3e,0x39,0xf7,0xa3,0x4d,0x04,0x7b,0x45,0x9c,0xd8,0xa7,0x23,0x37,0xda,0xf1,0x73,0xe3,0xc0,0x5f,0xd1,0xf1,0xa7,0xff,0xcb,0x48,0xf2,0x30,0xbe,0x1c,0x5d,0x8e,0xa6,0xf2,0x60,0x04,0xef,0x62,0xf4,0x89,0xda,0x4b,0xc0,0xe6,0xf0,0x4a,0xc0,0x0f,0xd5,0x4f,0xeb,0x2c,0xe4,0xdb,0x97,0x56,0x10,0x39,0xde,0x40,0xdf,0xd8,0xbf,0x73,0x12,0xf0,0xfe,0x3a,0x21,0x74,0x9b,0xc0,0x79,0xb3,0x16,0xe0,0x64,0xbc,0xca,0x0b,0xc7,0x1a,0xed,0x1e,0x5e,0x45,0xd1,0x67,0x9f,0xb5,0xd8,0x90,0x54,0xfc,0x1f,0xd8,0x4a,0x57,0x1b,0x96,0xa7,0xd4,0xcb,0x5f,0xa3,0xe4,0xa0,0xe8,0xb5,0xb0,0xc2,0x2c,0x08,0xf4,0xe1,0xb9,0x90,0x61,0xb5,0xb1,0xcf,0x97,0x62,0xca,0x72,0x00,0x15,0xec,0x42,0xe0,0x43,0xee,0x63,0x14,0x2e,0xd1,0xc5,0xcf,0x89,0x7f,0x61,0x5d,0x4e,0xad,0x3f,0x12,0xd7,0x7a,0x89,0x17,0xac,0xcb,0xfc,0xc5,0x4b,0x7c,0xac,0x5f,0xde,0x7e,0xfc,0x21,0x76,0x50,0x4c,0x36,0x46,0x34,0x51,0x19,0x64,0x3c,0xc6,0x38,0xb0,0x86,0x7c,0x04,0x2f,0x22,0x34,0x3c,0x4f,0x2d,0x72,0xef,0x53,0x2c,0x43,0x9a,0xe9,0xc6,0xf1,0x8b,0x45,0x02,0x6a,0xda,0x8e,0x2f,0x93,0xaa,0x9e,0x10,0x7a,0xbf,0x6f,0x07,0xf6,0x59,0xa9,0xc9,0xe8,0xce,0x09,0x06,0xca,0x19,0x43,0x9f,0x12,0xca,0x1c,0x55,0x2a,0x70,0xd5,0x0b,0x09,0xca,0x0a,0x82,0x45,0x05,0x03,0x7d,0x2d,0xd8,0x0a,0x72,0xae,0x01,0xd6,0x28,0xd1,0x7b,0xc3,0x74,0x07,0xc3,0x80,0xb7,0xbe,0x50,0xa7,0xa5,0xf7,0x2c,0xd8,0x47,0x02,0x36,0x10,0xe5,0xdb,0x11,0x63,0xd4,0x41,0xf5,0x02,0x7b,0x65,0x49,0x80,0x00,0x8f,0x79,0xd0,0x49,0x14,0xfc,0x01,0x78,0x2c,0x38,0x1e,0x4f,0x31,0x3a,0x6a,0xfb,0x0e,0xb6,0xbf,0xe4,0x37,0x93,0x74,0x1b,0x21,0x61,0x60,0xff,0xf2,0xfa,0x63,0x4d,0x13,0x9a,0xb9,0x2e,0xa1,0x90,0xb5,0x02,0xbf,0x81,0xe7,0xa4,0xce,0xcc,0x84,0x9f,0x4a,0x04,0xe6,0x11,0x62,0xaa,0x14,0x74,0xe0,0xed,0xb9,0x8b,0xc8,0x4e,0x54,0xe9,0xaf,0x76,0xcb,0x1d,0x93,0xbc,0x97,0x3c,0x6e,0xee,0x94,0x7b,0x26,0x79,0x27,0x79,0xdc,0x32,0x92,0x74,0xaf,0x0e,0x43,0xc9,0x13,0xcd,0xdd,0x72,0x8f,0x26,0xef,0x25,0x8f,0xeb,0x3b,0x81,0xbb,0x44,0x4f,0xec,0xd9,0x51,0x46,0xbf,0xbc,0x27,0x8e,0x0d,0xf2,0xa3,0x0a,0xf5,0x81,0x86,0x10,0xd5,0xe1,0x64,0x34,0x99,0xd8,0x4d,0x64,0xe7,0x66,0xed,0x40,0x76,0xfb,0xd7,0xc8,0xfa,0x80,0x7a,0xa3,0x8c,0x6a,0x51,0x7f,0x27,0x01,0xac,0x01,0x5a,0xfc,0x7d,0x6e,0x9d,0x5b,0xdf,0x9d,0x37,0x00,0x6e,0x9c,0xd9,0x81,0xf8,0xc0,0xb3,0x75,0x52,0xca,0x52,0x75,0x9b,0x54,0xf3,0xd8,0x39,0x8b,0x75,0x1a,0xba,0xe0,0xc7,0xd3,0x91,0xf3,0x00,0x33,0xff,0xc7,0x88,0xf9,0xf4,0xec,0xe6,0xea,0xc5,0xf4,0x68,0x8a,0x16,0x32,0xd0,0x65,0x56,0x07,0x81,0x39,0xdd,0xac,0x0e,0x30,0xf3,0x7f,0x8f,0x9c,0x55,0xae,0x45,0x44,0x35,0x06,0xa4,0x26,0x37,0x5f,0xb0,0x06,0xaf,0x03,0xc2,0xfe,0xfe,0xf4,0xf0,0xc6,0x1b,0xd8,0xac,0xd1,0x90,0xb7,0x32,0x59,0x04,0x95,0x89,0x79,0x23,0xd4,0x51,0x20,0xc3,0xf0,0xa7,0x8f,0x6f,0xff,0x0c,0xa0,0xe7,0xef,0x24,0x43,0xcf,0x81,0xec,0xf3,0x82,0xbd,0x3b,0x29,0xa9,0x56,0xc4,0x98,0x9f,0xcd,0x1a,0x36,0xa1,0xa5,0xc2,0x2a,0x63,0xf6,0xfa,0x3e,0x4d,0x32,0x9e,0xb1,0x61,0x98,0xf5,0x51,0x84,0xad,0x88,0xa1,0x5d,0x2b,0x62,0x2a,0xac,0x32,0x62,0x3f,0x11,0x98,0x0c,0x86,0x53,0x1f,0x3d,0xdb,0x4e,0x2c,0xd1,0x6e,0xc8,0xe2,0xdd,0x46,0x82,0x29,0xf0,0x34,0x82,0x89,0x2b,0xd6,0x47,0x40,0x90,0x44,0xeb,0xaa,0xd2,0x5b,0xb1,0x43,0x9b,0x56,0x8a,0xe5,0x70,0xca,0x58,0xbd,0x7a,0xf7,0x57,0x81,0xcc,0xaf,0xd8,0x09,0x81,0x77,0x8b,0x6d,0x0e,0x4a,0x7e,0x86,0x8f,0x98,0x0e,0xa4,0xed,0x78,0x36,0x4a,0xa3,0x9f,0xfd,0x7b,0xe2,0x0d,0x60,0x55,0x3b,0x09,0x0d,0xb3,0x29,0xdf,0x0e,0xce,0xcf,0x60,0x42,0xc2,0x6c,0x77,0x2e,0x9c,0x1c,0x69,0x5f,0x6a,0x10,0xfc,0x62,0x36,0xef,0x24,0x49,0x58,0xa0,0xd1,0xc3,0xb8,0xc3,0xc3,0x40,0xbc,0x44,0x46,0x41,0xb4,0x19,0xd8,0x7f,0x44,0x6b,0xeb,0x35,0x83,0x81,0xba,0x4d,0xee,0x6f,0x34,0x12,0x48,0xe9,0x2a,0xc6,0xa9,0xc1,0xb5,0x72,0xf6,0x8b,0xa1,0x65,0x09,0x11,0xee,0x34,0x41,0x48,0x88,0x0b,0x92,0x7a,0xb9,0x9f,0xb5,0xb0,0x41,0xcf,0x7a,0xe7,0x4f,0xab,0x0d,0x65,0x14,0xe5,0x59,0x04,0x51,0x1f,0x07,0xb2,0xe2,0x46,0x0b,0x6c,0xc0,0x0c,0x0e,0xd4,0x31,0x11,0x86,0x69,0xdf,0x3a,0xbe,0x39,0xd7,0xe1,0xf1,0x4c,0x72,0x1d,0x79,0x1b,0xfd,0x3b,0x1e,0xd8,0x61,0x53,0x08,0xcc,0x04,0x6f,0xed,0xdc,0xbc,0x9c,0x85,0x23,0x78,0xae,0x3a,0x82,0x1c,0x09,0xe1,0x08,0x36,0xf4,0xab,0xf1,0xf4,0x80,0x6c,0x8d,0x92,0x36,0x2d,0x4a,0xa3,0xa9,0xf8,0xfa,0xf3,0x9b,0x7c,0xf5,0xf9,0x95,0x19,0x48,0x77,0xe2,0x19,0x0b,0x29,0xfc,0x56,0xc7,0x42,0x55,0xb7,0xaf,0x1c,0xef,0xd4,0xb2,0x53,0x19,0x36,0x66,0x9c,0x69,0x69,0x8b,0x0e,0x71,0x9e,0x26,0x13,0x38,0xb2,0xfb,0x46,0x7d,0x15,0x51,0x44,0x2c,0x9d,0x14,0xb1,0x0e,0xd7,0x03,0x06,0xda,0x1d,0x17,0x17,0x19,0x69,0xbc,0x73,0xdc,0x24,0xa2,0xdd,0xc9,0xcb,0xdb,0x7f,0x84,0x0d,0x6d,0x22,0x6e,0x01,0xb4,0x8d,0xae,0x7a,0xc7,0x8d,0x1b,0x79,0xc5,0x7a,0x60,0x84,0x62,0x34,0x53,0x7c,0xaa,0x20,0x0f,0x6f,0x23,0x1e,0x9c,0x8b,0xcd,0x1a,0xe2,0xbd,0x09,0x3d,0x72,0x7f,0x7e,0x31,0xe9,0x44,0x00,0x91,0x2a,0x3c,0xa1,0xa2,0xaa,0x00,0x6c,0xd4,0x54,0x2d,0x60,0x00,0x00,0x39,0x17,0x50,0x62,0xef,0x87,0x48,0x20,0x41,0x45,0xbb,0xfc,0xbe,0x07,0x36,0xe3,0x34,0x42,0x72,0x8b,0x31,0xdd,0x78,0xcc,0x38,0x51,0x6f,0xb1,0x8d,0x68,0xca,0x6e,0x62,0x63,0x2d,0xe6,0x2f,0xaf,0x27,0x53,0x24,0x74,0x18,0x48,0x03,0xd7,0x35,0xea,0x1a,0x09,0x97,0x22,0x55,0xf7,0xa8,0x19,0x14,0x79,0xa3,0xfd,0x7e,0x8f,0xdb,0xb4,0xe2,0x1d,0x19,0x6d,0x9c,0x71,0x71,0x77,0xdc,0xf0,0xdd,0xdb,0xd1,0xa7,0x78,0x63,0xc2,0xae,0x79,0x11,0x8b,0xa5,0x3a,0xe4,0x36,0xd8,0xb4,0x4d,0x04,0x67,0x3e,0x8a,0xc7,0x70,0xd1,0x04,0xbb,0x3a,0xa6,0x70,0x99,0xc9,0xda,0xbf,0x47,0xeb,0x9c,0x8a,0x0b,0x03,0x72,0xc2,0x59,0x44,0xed,0x18,0x83,0xea,0xc2,0x61,0x01,0xeb,0xfd,0x65,0x3d,0xb0,0x7f,0xb0,0xd8,0x9a,0x08,0x10,0x06,0x09,0x16,0x81,0x06,0xef,0xb6,0x40,0xc1,0x59,0x1d,0x77,0x18,0x20,0xd7,0x82,0x2c,0x83,0xfd,0x66,0x61,0x4d,0x9e,0x41,0x1b,0xa4,0x59,0x12,0xf2,0x3c,0x56,0xcf,0x55,0x17,0x50,0x9e,0x2f,0xac,0x99,0x79,0x24,0xee,0x90,0x22,0x3f,0x59,0xa1,0xa5,0x42,0x02,0xfb,0x42,0x80,0x69,0x40,0x96,0x83,0x68,0xa2,0x00,0x77,0xad,0xc4,0x38,0xee,0x28,0x20,0xe1,0x26,0xdd,0x76,0x76,0x75,0x4c,0xf9,0xa9,0x15,0x71,0x9d,0x0c,0xb3,0xce,0x42,0xc2,0x6f,0x1b,0xb2,0xb6,0x0e,0xc5,0x49,0x6c,0x93,0x78,0x04,0xa4,0x85,0xec,0x10,0x8f,0x69,0x51,0xb8,0xeb,0x2e,0xdc,0x1f,0xa4,0xe0,0xb7,0xb8,0xc2,0xd4,0xd2,0x5f,0xdf,0xbf,0x31,0x00,0x94,0x14,0xce,0xc1,0x0d,0x80,0x25,0xcd,0x56,0x60,0x7d,0x94,0x58,0xcb,0xa5,0xc8,0xd9,0x40,0xa2,0x7f,0xc1,0xe6,0xf3,0xcc,0x40,0x13,0x09,0xaa,0x18,0xed,0x58,0x58,0x8a,0x33,0x56,0xa4,0x72,0x3b,0xa5,0x5b,0xf9,0xbe,0xee,0xab,0xc0,0x67,0xfa,0xca,0x98,0x76,0xd5,0xf6,0x0b,0xd8,0x02,0xc2,0x7b,0x58,0xfb,0xc9,0x6e,0x60,0xff,0x88,0x14,0xf3,0x43,0x94,0xc1,0x39,0x90,0x7f,0xf6,0x0e,0x6e,0xbe,0x4a,0x23,0x01,0xd5,0x4a,0xb7,0x04,0xa8,0x63,0x07,0xe0,0x0f,0x88,0xa9,0xb1,0xe2,0x88,0xc8,0x8c,0x22,0xda,0x9e,0x99,0x2b,0x39,0x2c,0x1c,0x78,0xa3,0x43,0x76,0x7c,0x66,0x8e,0x1b,0xc0,0xc7,0x46,0x00,0xc7,0x05,0x00,0x7c,0x5a,0x75,0x01,0x40,0xbb,0x53,0x5f,0x2b,0xd9,0x4c,0x9b,0xd9,0xff,0x89,0xc5,0x01,0x17,0x51,0x16,0xe1,0xbd,0x62,0x05,0xb1,0xc1,0x37,0x9a,0x62,0x2b,0x8f,0x20,0xf9,0x12,0x8b,0xaf,0x32,0x56,0x95,0x7d,0x68,0x40,0x48,0x3c,0xd8,0x51,0x7d,0xca,0xb9,0x12,0x22,0x7b,0xdc,0x01,0x1d,0xed,0x7c,0x4a,0x06,0x06,0xde,0x07,0x25,0x50,0x47,0xbf,0x58,0x32,0xa7,0x86,0xc5,0x9d,0x28,0x83,0x40,0xb6,0x99,0x9f,0xbd,0xb0,0x00,0xb4,0xd4,0x45,0x99,0xaf,0x82,0x89,0x43,0x1f,0x42,0xf7,0x80,0xcf,0xde,0xc1,0xce,0x0d,0x24,0x47,0xc7,0xe7,0x60,0xf5,0x99,0x79,0xa6,0x74,0xf0,0x77,0xeb,0x5c,0x6e,0x9b,0x9d,0x83,0xbd,0xd8,0xbe,0xe8,0x79,0x85,0xa4,0xac,0xd3,0x21,0x3d,0xd2,0xb3,0xa3,0x1a,0x91,0xf7,0xed,0x2a,0x33,0x1f,0x3d,0xbb,0xe5,0x79,0x89,0x9e,0xdd,0xf2,0xe0,0xbc,0x67,0x37,0xce,0xae,0x43,0x14,0x49,0xf4,0x25,0x28,0xab,0xad,0x38,0xa2,0x1f,0x0f,0x53,0x86,0x74,0xdf,0xb3,0x9b,0x58,0xf4,0xfe,0xfd,0x72,0xaf,0xb4,0x17,0x8a,0xd1,0x26,0xea,0x8b,0x1e,0x74,0xf9,0x4f,0xfc,0x96,0x90,0xbe,0x1d,0xb1,0xd9,0xb7,0x72,0x92,0x9e,0xbd,0xa4,0x78,0x18,0x7b,0xf1,0x5d,0xe3,0x6a,0x37,0x87,0xf5,0x91,0x72,0x8e,0x62,0xe4,0x09,0xf3,0xb0,0xfb,0x80,0x35,0x23,0x53,0x78,0xac,0xd8,0xd1,0xe6,0x1b,0x7e,0x8a,0x83,0x67,0xd2,0x33,0x09,0x59,0x45,0xd1,0xe9,0xed,0x94,0x00,0xcb,0x0d,0x15,0x9c,0xd2,0x16,0x33,0x55,0xe8,0x16,0x43,0x60,0xc2,0x1c,0xe1,0x41,0xc9,0x4a,0x09,0xd0,0xd2,0x4c,0xfd,0x2e,0x74,0x35,0x97,0xbc,0x93,0x93,0x90,0x43,0xb5,0xdc,0x07,0x44,0xb1,0x07,0x83,0x4f,0x92,0xd3,0x9a,0x7c,0xba,0xcd,0x52,0x04,0x24,0xe1,0xbf,0x9e,0xd5,0xcf,0x67,0xf6,0xfb,0x33,0xfc,0x8d,0x66,0x1f,0x6a,0xab,0x27,0x27,0x75,0x8b,0xff,0xa5,0x8f,0x6b,0x2d,0x59,0x24,0x63,0x9e,0x52,0xc7,0x44,0x02,0x52,0xc1,0xff,0x1d,0x1a,0xb2,0xc0,0x0c,0x04,0x09,0x73,0x77,0xdb,0x14,0x54,0xa9,0x8b,0x65,0xba,0x5e,0x1f,0xfc,0xaa,0xca,0xbc,0xb8,0xc3,0x4f,0x08,0x81,0x61,0xb3,0xb2,0xa7,0x0c,0xa0,0xd4,0x62,0x87,0x07,0x1f,0x70,0x11,0x60,0x19,0x71,0xe5,0x36,0xd4,0xd3,0x48,0xc1,0x65,0xdb,0xae,0xb4,0xbb,0xf3,0xc0,0x49,0x31,0xc8,0xc3,0xd3,0x6c,0xac,0xcb,0x48,0x39,0xd7,0x2d,0x75,0xad,0x74,0x68,0x48,0x76,0x77,0xce,0x16,0xe9,0x45,0xd9,0xbd,0x80,0xf0,0x80,0x6f,0x1b,0x05,0xac,0x7e,0x67,0xa1,0x4e,0xaf,0x61,0x6b,0xb9,0xf7,0xea,0xaf,0x1d,0x88,0xe7,0xe3,0xb7,0x15,0x8e,0x53,0x2f,0x7c,0xa6,0xb8,0xce,0x59,0xa7,0x69,0x77,0xe1,0xa4,0xd3,0x3a,0x5e,0x67,0xe1,0x59,0x4a,0x49,0x3a,0x60,0xfb,0xaa,0x12,0x67,0xc8,0x2a,0xac,0x09,0xf1,0x46,0x23,0x1d,0x7b,0xb5,0xa4,0x44,0x8f,0x79,0x6f,0xc7,0xe2,0xa9,0x4f,0x4f,0x6e,0xf9,0x53,0x95,0xa2,0x90,0x39,0x19,0x0b,0x5b,0xb8,0x1a,0xf9,0xa3,0x9a,0xe4,0x03,0x13,0x90,0x7f,0x75,0x28,0x5d,0xd8,0xec,0x29,0x42,0xb8,0x54,0xc0,0xbc,0xf5,0xfc,0x3b,0xcb,0x47,0x2f,0x79,0x03,0x00,0xbb,0x56,0x42,0xe0,0x56,0x3c,0x0e,0xe3,0x10,0x54,0x57,0x7a,0x4a,0xe7,0xb3,0x28,0xcc,0xc6,0x13,0xa5,0xc4,0x58,0x5a,0xc1,0xb6,0x2d,0xea,0xf3,0x16,0x36,0x9e,0x78,0x62,0xcb,0x92,0xbc,0x85,0x8d,0x92,0x22,0x89,0x6a,0x65,0x00,0x79,0x67,0xb8,0x84,0x96,0xd7,0x66,0xdb,0x7c,0xd0,0xc2,0x31,0xb7,0x31,0x6f,0x97,0x29,0x69,0x79,0xae,0x50,0xd8,0xf6,0xf2,0x47,0x76,0x7c,0x3b,0x16,0x60,0x3a,0x8d,0x91,0x97,0x44,0x8b,0x31,0x0a,0x27,0x5e,0x19,0xa3,0xec,0x5e,0xd8,0xcb,0x77,0xec,0xb8,0x65,0x0c,0x46,0x28,0x39,0x80,0xac,0x40,0x15,0xf0,0x73,0x67,0xbf,0x66,0xfe,0xbc,0xaf,0xd8,0x75,0x94,0xbd,0x45,0xdd,0x64,0x43,0x73,0xde,0x45,0xdc,0x5f,0xc3,0x6f,0x0e,0x12,0x7b,0x5e,0x28,0xd3,0x53,0x06,0x14,0xf9,0xdb,0x36,0x20,0xb8,0xd5,0xaa,0xa0,0x8a,0xac,0xfd,0xe3,0x35,0x77,0xbc,0xc4,0x0d,0xd7,0x96,0xb7,0xab,0xc4,0x1a,0x37,0x03,0xf9,0x33,0x1b,0xae,0x7e,0x6a,0x63,0x3e,0xb7,0x1a,0x9a,0x8d,0x41,0xb4,0x76,0x72,0xe6,0xd5,0xb0,0x62,0x7a,0x45,0x14,0xf4,0x9b,0x11,0x54,0xcd,0x88,0xff,0x16,0x14,0xfd,0xc0,0xc7,0xfb,0xaa,0x24,0x2d,0x6a,0x20,0xa4,0x0c,0x1c,0x0a,0x27,0x96,0x87,0x3a,0x88,0xf7,0xd0,0x3b,0x08,0x12,0x46,0xa3,0xd1,0x63,0x86,0x52,0xaa,0xd7,0xc5,0x60,0xa5,0xfd,0xfd,0x65,0xbe,0x57,0xcf,0x8e,0x4e,0x36,0xa4,0x28,0x91,0x90,0xc3,0xe5,0xb5,0x17,0xcb,0x43,0x1d,0xc5,0x69,0x86,0x91,0x55,0x0f,0x62,0x98,0xa2,0x92,0x62,0xc9,0xab,0x22,0x4e,0x33,0x82,0xac,0x0b,0x10,0x23,0x14,0x95,0x07,0x4b,0x5e,0x49,0xf0,0x88,0x11,0xd8,0x73,0x9c,0x0e,0x8c,0x6d,0x97,0xcb,0x62,0x9b,0xb7,0x37,0x5a,0x20,0xca,0xb8,0xb2,0x09,0xa4,0x6c,0x32,0xda,0xf8,0x6b,0x34,0x63,0x35,0xba,0x0b,0x3b,0xaf,0xfa,0x66,0x01,0xb6,0x61,0x08,0xc3,0x5c,0x6e,0xc7,0xba,0xc5,0x52,0x1a,0x41,0xd4,0x84,0x3d,0xcc,0x1f,0x64,0x08,0x1e,0xc0,0x3d,0xa5,0x0e,0x47,0x91,0xbb,0x11,0x36,0xa4,0x72,0x0f,0x02,0xcf,0xd8,0x83,0x11,0x03,0xfc,0xb9,0x82,0x7d,0xc2,0x23,0x0d,0x65,0x43,0x48,0xa9,0xb0,0x18,0x9c,0x4a,0x85,0xd7,0xa0,0x58,0x88,0x52,0xd4,0x60,0x17,0x48,0x28,0x5e,0xd8,0xc2,0x7e,0xcd,0xcc,0xbd,0xf5,0xcb,0x2b,0x8c,0x07,0x93,0xaf,0xcf,0xb5,0x54,0xe0,0x6e,0x2f,0x3f,0xb0,0x5d,0x02,0xd6,0xb4,0x6c,0x66,0x0a,0xfb,0xcb,0x12,0x32,0x0a,0x69,0xa4,0x86,0x43,0x65,0xf4,0xc2,0x2e,0x3d,0xc9,0x47,0xf0,0xca,0xe1,0x94,0xbd,0x7c,0x7a,0xf6,0xf2,0xfb,0xef,0xaf,0x7f,0x78,0x1a,0xae,0x68,0x2c,0xbf,0x3f,0x8a,0x07,0x1a,0x21,0x55,0xc9,0x96,0x82,0x96,0x34,0x8a,0x4a,0xc7,0xc2,0xf8,0x8b,0x0c,0x8d,0x3a,0x7e,0xbd,0xba,0x2c,0xa3,0xa3,0x74,0xc1,0x05,0xde,0x80,0x3d,0x62,0x48,0x5b,0x65,0x95,0xe9,0x95,0xa7,0xdb,0x08,0x80,0xeb,0x04,0x1b,0x58,0xec,0x96,0x1f,0x79,0xd2,0xc0,0x20,0x0a,0x35,0xd4,0xa2,0xdf,0xe5,0x7b,0x71,0x60,0xbd,0xc7,0x51,0xad,0xde,0x84,0xf7,0xc4,0xef,0x92,0x63,0x63,0xa9,0xbd,0x73,0x84,0xe4,0x13,0x4c,0x86,0xec,0x59,0x29,0x60,0x82,0x1a,0x11,0x88,0x62,0xee,0x81,0x71,0x67,0x7e,0x61,0x4f,0x67,0x2c,0xbf,0x64,0x2f,0xf1,0xcb,0x9e,0x66,0x15,0xe1,0x29,0x6f,0xb7,0x63,0xd1,0xa4,0x53,0x7f,0x5e,0x83,0x0d,0x9e,0x91,0x5b,0xc2,0x8c,0xe1,0xc4,0x3f,0x7b,0x79,0x7d,0x1c,0xc4,0x4b,0x81,0xd0,0xe5,0x71,0xbd,0xe5,0x74,0x8e,0x9c,0x0d,0x4f,0xb6,0x81,0x18,0xc7,0x63,0x0e,0xc4,0xdb,0xfb,0x32,0xb9,0x67,0x54,0xd2,0x55,0x45,0x55,0x7b,0x34,0xb1,0x1b,0x8d,0x89,0x8b,0x5b,0x5d,0xfe,0x97,0xac,0xd7,0x80,0xd5,0x89,0xe7,0xc4,0x46,0xbe,0xbd,0x7c,0xcb,0x7f,0x3b,0x31,0x9a,0xec,0x72,0x14,0x8f,0xc9,0x1b,0xa3,0x8a,0x08,0x26,0xe7,0x0d,0x41,0xb0,0xa5,0x35,0x44,0x2e,0x46,0x8c,0x04,0x67,0x44,0xf6,0xc1,0xb9,0x5e,0x44,0x7f,0x8b,0xfb,0xdc,0xac,0x0f,0xdc,0x9a,0x59,0x1f,0x61,0x75,0x08,0x44,0x02,0xfa,0xb6,0x27,0x8c,0xc9,0x15,0x83,0x91,0x1b,0xde,0xe3,0x01,0xcd,0x66,0x53,0x06,0x08,0xd5,0x72,0x7b,0x29,0xcb,0xfd,0xd0,0xb8,0xe6,0xbd,0x41,0x8d,0x0f,0x31,0x21,0x5e,0xbf,0xde,0x57,0x13,0x3c,0x59,0xf7,0xdf,0x3f,0xfc,0xe5,0x57,0x98,0x5c,0xf6,0x2c,0xdd,0x23,0xf9,0xaf,0x7c,0x2e,0x0f,0xd8,0xb8,0xeb,0x20,0x9e,0x72,0x67,0xe2,0x31,0xc5,0x0c,0x89,0x24,0x6c,0x39,0x4e,0xd1,0x52,0xc9,0x4c,0xdf,0xf1,0x24,0x30,0xcc,0xf6,0xc1,0x8c,0x68,0xc8,0x94,0x4c,0xa3,0x38,0x05,0xc5,0x5c,0xd2,0xfd,0xe8,0x8b,0x50,0x93,0x85,0x9c,0x63,0xfe,0xe4,0xe1,0x7f,0x00,0xc4,0x96,0xc7,0x22,0x90,0x58,0x00,0x00
};

static const char PROGMEM INDEX2_HTML[] = R"rawliteral(

)rawliteral";
///////////

typedef struct
{
    httpd_req_t *req;
    size_t len;
} jpg_chunking_t;

#define PART_BOUNDARY "123456789000000000000987654321"
static const char *_STREAM_CONTENT_TYPE = "multipart/x-mixed-replace;boundary=" PART_BOUNDARY;
static const char *_STREAM_BOUNDARY = "\r\n--" PART_BOUNDARY "\r\n";
static const char *_STREAM_PART = "Content-Type: image/jpeg\r\nContent-Length: %u\r\n\r\n";

httpd_handle_t stream_httpd = NULL;
httpd_handle_t camera_httpd = NULL;

static int8_t light_enabled = 0;
static int8_t aborted = 0;
static int8_t shutdown = 0;

static size_t jpg_encode_stream(void *arg, size_t index, const void *data, size_t len)
{
    jpg_chunking_t *j = (jpg_chunking_t *)arg;
    if (!index)
    {
        j->len = 0;
    }
    if (httpd_resp_send_chunk(j->req, (const char *)data, len) != ESP_OK)
    {
        return 0;
    }
    j->len += len;
    return len;
}

static esp_err_t stream_handler(httpd_req_t *req)
{
    camera_fb_t *fb = NULL;
    esp_err_t res = ESP_OK;
    size_t _jpg_buf_len = 0;
    uint8_t *_jpg_buf = NULL;
    char *part_buf[256]; //used to be 64

    res = httpd_resp_set_type(req, _STREAM_CONTENT_TYPE);
    if (res != ESP_OK)
    {
        return res;
    }

    httpd_resp_set_hdr(req, "Access-Control-Allow-Origin", "*");

    while (true)
    {

        fb = esp_camera_fb_get();
        if (!fb)
        {
            Serial.println("Camera capture failed");
            res = ESP_FAIL;
        }
        else
        {

            if (fb->width > 400)
            {
                if (fb->format != PIXFORMAT_JPEG)
                {
                    bool jpeg_converted = frame2jpg(fb, 80, &_jpg_buf, &_jpg_buf_len);
                    esp_camera_fb_return(fb);
                    fb = NULL;
                    if (!jpeg_converted)
                    {
                        Serial.println("JPEG compression failed");
                        res = ESP_FAIL;
                    }
                }
                else
                {
                    _jpg_buf_len = fb->len;
                    _jpg_buf = fb->buf;
                }
            }
        }
        if (res == ESP_OK)
        {
            size_t hlen = snprintf((char *)part_buf, 256, _STREAM_PART, _jpg_buf_len);
            res = httpd_resp_send_chunk(req, (const char *)part_buf, hlen);
        }
        if (res == ESP_OK)
        {
            res = httpd_resp_send_chunk(req, (const char *)_jpg_buf, _jpg_buf_len);
        }
        if (res == ESP_OK)
        {
            res = httpd_resp_send_chunk(req, _STREAM_BOUNDARY, strlen(_STREAM_BOUNDARY));
        }
        if (fb)
        {
            esp_camera_fb_return(fb);
            fb = NULL;
            _jpg_buf = NULL;
        }
        else if (_jpg_buf)
        {
            free(_jpg_buf);
            _jpg_buf = NULL;
        }
        if (res != ESP_OK)
        {
            Serial.println(res);
            break;
        }
    }

    return res;
}

static esp_err_t cmd_handler(httpd_req_t *req)
{

    HardwareSerial PrintSerial(1);
    PrintSerial.begin(PrintSerial_Speed, SERIAL_8N1, SERIAL1_RXPIN, SERIAL1_TXPIN);
    PrintSerial.setRxBufferSize(15000);
    char *buf;
    size_t buf_len;
    char variable[32] = {
        0,
    };
    char value[32] = {
        0,
    };

    buf_len = httpd_req_get_url_query_len(req) + 1;
    if (buf_len > 1)
    {
        buf = (char *)malloc(buf_len);
        if (!buf)
        {
            httpd_resp_send_500(req);
            return ESP_FAIL;
        }
        if (httpd_req_get_url_query_str(req, buf, buf_len) == ESP_OK)
        {
            if (httpd_query_key_value(buf, "var", variable, sizeof(variable)) == ESP_OK &&
                httpd_query_key_value(buf, "val", value, sizeof(value)) == ESP_OK)
            {
                if (debugmsg)
                {
                    // Serial.println(value);
                }
            }
            else
            {
                free(buf);
                httpd_resp_send_404(req);
                return ESP_FAIL;
            }
        }
        else
        {
            free(buf);
            httpd_resp_send_404(req);
            return ESP_FAIL;
        }
        free(buf);
    }
    else
    {
        httpd_resp_send_404(req);
        return ESP_FAIL;
    }

    int val = atoi(value);
    sensor_t *s = esp_camera_sensor_get();
    int res = 0;

    if (!strcmp(variable, "framesize"))
    {

        if (s->pixformat == PIXFORMAT_JPEG)
            res = s->set_framesize(s, (framesize_t)val);
    }
    else if (!strcmp(variable, "quality"))
        res = s->set_quality(s, val);
    else if (!strcmp(variable, "contrast"))
        res = s->set_contrast(s, val);
    else if (!strcmp(variable, "brightness"))
        res = s->set_brightness(s, val);
    else if (!strcmp(variable, "saturation"))
        res = s->set_saturation(s, val);
    else if (!strcmp(variable, "gainceiling"))
        res = s->set_gainceiling(s, (gainceiling_t)val);
    else if (!strcmp(variable, "colorbar"))
        res = s->set_colorbar(s, val);
    else if (!strcmp(variable, "awb"))
        res = s->set_whitebal(s, val);
    else if (!strcmp(variable, "agc"))
        res = s->set_gain_ctrl(s, val);
    else if (!strcmp(variable, "aec"))
        res = s->set_exposure_ctrl(s, val);
    else if (!strcmp(variable, "hmirror"))
        res = s->set_hmirror(s, val);
    else if (!strcmp(variable, "vflip"))
        res = s->set_vflip(s, val);
    else if (!strcmp(variable, "awb_gain"))
        res = s->set_awb_gain(s, val);
    else if (!strcmp(variable, "agc_gain"))
        res = s->set_agc_gain(s, val);
    else if (!strcmp(variable, "aec_value"))
        res = s->set_aec_value(s, val);
    else if (!strcmp(variable, "aec2"))
        res = s->set_aec2(s, val);
    else if (!strcmp(variable, "dcw"))
        res = s->set_dcw(s, val);
    else if (!strcmp(variable, "bpc"))
        res = s->set_bpc(s, val);
    else if (!strcmp(variable, "wpc"))
        res = s->set_wpc(s, val);
    else if (!strcmp(variable, "raw_gma"))
        res = s->set_raw_gma(s, val);
    else if (!strcmp(variable, "lenc"))
        res = s->set_lenc(s, val);
    else if (!strcmp(variable, "special_effect"))
        res = s->set_special_effect(s, val);
    else if (!strcmp(variable, "wb_mode"))
        res = s->set_wb_mode(s, val);
    else if (!strcmp(variable, "ae_level"))
    {

        Serial.printf("var=");
        Serial.printf(variable);

        res = s->set_ae_level(s, val);
        Serial.printf(" valvar=");
        Serial.print(val);
    }
    else if (!strcmp(variable, "light"))
    {
        light_enabled = val;
        if (light_enabled)
        {
            digitalWrite(ledPin, HIGH);
        }
        else
        {
            digitalWrite(ledPin, LOW);
        }
    }
    else if (!strcmp(variable, "reboot"))
    {
        // light_enabled = val;
        if (val)
        {
            if (debugmsg)
            {
                Serial.println("Restarting ESP");
            }
            ESP.restart();
        }
        else
        {
            // digitalWrite(ledPin, LOW);
        }
    }
    else if (!strcmp(variable, "query"))
    {

        String a, part1, part2, exttemp, bedtemp, elapsedt, firstHalf, secondHalf;
        float progress, part1long, part2long;
        int ind1, bedindex, lastindex, extindex, lastind;

        if (debugmsg)
        {
            Serial.println("Start query");
        }
        PrintSerial.print("M27\n"); //SD printing byte XXXXXX/XXXXXXX
        if (debugmsg)
        {
            Serial.println("M27 Sent");
        }
        delay(700);
        while (PrintSerial.available())
        {

            a = PrintSerial.readStringUntil('\n'); // read the incoming data as string

            if (a.startsWith("SD printing byte "))
            { //Printing progress response

                if (debugmsg)
                {
                    Serial.println("Printing progress Triggered");
                    Serial.println(a);
                }
                a.remove(0, 17);
                ind1 = a.indexOf('/');
                part1 = a.substring(0, ind1);
                part2 = a.substring(ind1 + 1);
                part1long = part1.toFloat();
                part2long = part2.toFloat();
                progress = (part1long / part2long) * 100;
            }
            else if (a.startsWith("ok T"))
            { //Temperature response
                if (debugmsg)
                {
                    Serial.println("Temperature response Triggered");
                    Serial.println(a);
                }
                a.remove(0, 5);
                bedindex = a.indexOf(":");
                secondHalf = a.substring(bedindex, a.length());

                secondHalf.remove(0, 1);
                lastindex = secondHalf.indexOf(" ");
                secondHalf.remove(lastindex);
                extindex = a.indexOf(" ");
                firstHalf = a;
                firstHalf.remove(extindex);
                // a.remove(tempstring);
                if (debugmsg)
                {
                    Serial.println("Ext temp:" + firstHalf);
                    Serial.println("Bed temp:" + secondHalf);
                }
                exttemp = firstHalf;
                bedtemp = secondHalf;
            }
            else if (a.startsWith("echo"))
            {
                if (debugmsg)
                {
                    Serial.println("Elapsed Time Response Triggered");
                    Serial.println(a);
                }
                lastind = a.lastIndexOf(":");
                a.remove(0, lastind);
                a.remove(0, 2);
                elapsedt = a;
            }
            else
            {
                if (debugmsg)
                {
                    Serial.println("Unknown response: " + a);
                }
            }
        }
        PrintSerial.print("M31\n"); //echo: Print time:  XXh XXm XXs
        if (debugmsg)
        {
            Serial.println("M31 Sent");
        }
        delay(700);
        while (PrintSerial.available())
        {

            a = PrintSerial.readStringUntil('\n'); // read the incoming data as string

            if (a.startsWith("SD printing byte "))
            { //Printing progress response

                if (debugmsg)
                {
                    Serial.println("Printing progress Triggered");
                    Serial.println(a);
                }
                a.remove(0, 17);
                ind1 = a.indexOf('/');
                part1 = a.substring(0, ind1);
                part2 = a.substring(ind1 + 1);
                part1long = part1.toFloat();
                part2long = part2.toFloat();
                progress = (part1long / part2long) * 100;
            }
            else if (a.startsWith("ok T"))
            { //Temperature response
                if (debugmsg)
                {
                    Serial.println("Temperature response Triggered");
                    Serial.println(a);
                }
                a.remove(0, 5);
                bedindex = a.indexOf(":");
                secondHalf = a.substring(bedindex, a.length());
                // Serial.println("secondHalf" + secondHalf);
                secondHalf.remove(0, 1);
                lastindex = secondHalf.indexOf(" ");
                secondHalf.remove(lastindex);
                extindex = a.indexOf(" ");
                firstHalf = a;
                firstHalf.remove(extindex);
                // a.remove(tempstring);
                if (debugmsg)
                {
                    Serial.println("Ext temp:" + firstHalf);
                    Serial.println("Bed temp:" + secondHalf);
                }
                exttemp = firstHalf;
                bedtemp = secondHalf;
            }
            else if (a.startsWith("echo"))
            {
                if (debugmsg)
                {
                    Serial.println("Elapsed Time Response Triggered");
                    Serial.println(a);
                }
                lastind = a.lastIndexOf(":");
                a.remove(0, lastind);
                a.remove(0, 2);
                elapsedt = a;
            }
            else
            {
                if (debugmsg)
                {
                    Serial.println("Unknown response: " + a);
                }
            }
        }
        PrintSerial.print("M105\n"); //ok T:XXX.XX /XXX.XX B:XXX.XX /XXX.XX @:XXX B@:XXX
        if (debugmsg)
        {
            Serial.println("M105 Sent");
        }
        delay(700);
        while (PrintSerial.available())
        {

            a = PrintSerial.readStringUntil('\n'); // read the incoming data as string

            if (a.startsWith("SD printing byte "))
            { //Printing progress response

                if (debugmsg)
                {
                    Serial.println("Printing progress Triggered");
                    Serial.println(a);
                }
                a.remove(0, 17);
                ind1 = a.indexOf('/');
                part1 = a.substring(0, ind1);
                part2 = a.substring(ind1 + 1);
                part1long = part1.toFloat();
                part2long = part2.toFloat();
                progress = (part1long / part2long) * 100;
            }
            else if (a.startsWith("ok T"))
            { //Temperature response
                if (debugmsg)
                {
                    Serial.println("Temperature response Triggered");
                    Serial.println(a);
                }
                a.remove(0, 5);
                bedindex = a.indexOf(":");
                secondHalf = a.substring(bedindex, a.length());
                // Serial.println("secondHalf" + secondHalf);
                secondHalf.remove(0, 1);
                lastindex = secondHalf.indexOf(" ");
                secondHalf.remove(lastindex);
                extindex = a.indexOf(" ");
                firstHalf = a;
                firstHalf.remove(extindex);
                // a.remove(tempstring);
                if (debugmsg)
                {
                    Serial.println("Ext temp:" + firstHalf);
                    Serial.println("Bed temp:" + secondHalf);
                }
                exttemp = firstHalf;
                bedtemp = secondHalf;
            }
            else if (a.startsWith("echo"))
            {
                if (debugmsg)
                {
                    Serial.println("Elapsed Time Response Triggered");
                    Serial.println(a);
                }
                lastind = a.lastIndexOf(":");
                a.remove(0, lastind);
                a.remove(0, 2);
                elapsedt = a;
            }
            else
            {
                if (debugmsg)
                {
                    Serial.println("Unknown response: " + a);
                }
            }
        }

        static char json_response2[1024];
        char *p = json_response2;
        *p++ = '{';
        p += sprintf(p, "\"progress\":\"%.2f\",", progress);
        p += sprintf(p, "\"exttemp\":\"%s\",", exttemp.c_str());
        p += sprintf(p, "\"bedtemp\":\"%s\",", bedtemp.c_str());
        p += sprintf(p, "\"elapsedt\":\"%s\",", elapsedt.c_str());
        p += sprintf(p, "\"cputemp\":\"%f\"", (temprature_sens_read() - 32) / 1.8);
        // p += sprintf(p, "\"ver\":\"%s\"", verNum.c_str());
        *p++ = '}';
        *p++ = 0;
        httpd_resp_set_type(req, "application/json");
        httpd_resp_set_hdr(req, "Access-Control-Allow-Origin", "*");
        return httpd_resp_send(req, json_response2, strlen(json_response2));
    }
    else if (!strcmp(variable, "abort"))
    {
        aborted = val;
        if (aborted)
        {
            if (debugmsg)
            {
                Serial.println("Sending Abort Start");
            }

            PrintSerial.print(abortString);
            PrintSerial.print("M117 Heaters off, going HOME\n");
            if (debugmsg)
            {
                Serial.println("Sending Abort Complete");
            }
        }
        else
        {
        }
    }
    else if (!strcmp(variable, "shutdown"))
    {
        // shutdown = val;
        if (!shutdown)
        {
            if (debugmsg)
            {
                Serial.println("Power Off");
            }
            digitalWrite(RELAY_PIN, HIGH);
            shutdown = 1;
        }
        else if (shutdown)
        {
            if (debugmsg)
            {
                Serial.println("Power On");
            }
            digitalWrite(RELAY_PIN, LOW);
            shutdown = 0;
        }
    }

    else if (!strcmp(variable, "command"))
    {
        String cmdText = value;
        cmdText = urldecode(cmdText);
        PrintSerial.print(cmdText);
        StaticJsonDocument<500> doc;
        if (debugmsg)
        {
            Serial.print(cmdText + " Command Sent\n");
        }
        delay(2000);

        String cmdResponse = "";
        String cmdConcat = "";

        bool breakOuterLoop = false;

        for (;;)
        {
            uint32_t timeout = 5000;
            uint32_t start = millis();
            if (breakOuterLoop)
            {
                if (debugmsg)
                {
                    Serial.println("Breaking outer loop...");
                }
                break;
            }

            if (PrintSerial.available() >= 1)
            {
                while (PrintSerial.available())
                {

                    cmdResponse = PrintSerial.readStringUntil('\n');
                    if (debugmsg)
                    {

                        Serial.println(cmdResponse + " " + PrintSerial.available());
                        if (!PrintSerial.available())
                        {
                            Serial.println("Buffer Empty...");
                        }
                    }
                    cmdResponse = cmdResponse + "\\n";
                    cmdConcat = cmdConcat + cmdResponse;
                    if (!PrintSerial.available())
                    {
                        breakOuterLoop = true;
                        break;
                    }

                    if (cmdResponse.indexOf("ok") != -1)
                    {
                        if (debugmsg)
                        {
                            Serial.println("ok reached...");
                        }
                        breakOuterLoop = true;
                        break;
                    }

                    while ((PrintSerial.available() < 20) && ((millis() - start) < timeout))
                    {
                        delay(100);
                    }
                }
            }
            else
            {
                breakOuterLoop = true;
                break;
            }
        }

        // cmdConcat.replace("\nok\n", "");
        DeserializationError error = deserializeJson(doc, cmdConcat);
        if (error)
        {
            static char json_response2[4096];
            char *p = json_response2;
            *p++ = '{';
            p += sprintf(p, "\"cmdresponse\":\"%s\"", cmdConcat.c_str());
            *p++ = '}';
            *p++ = 0;
            httpd_resp_set_type(req, "application/json");
            httpd_resp_set_hdr(req, "Access-Control-Allow-Origin", "*");
            return httpd_resp_send(req, json_response2, strlen(json_response2));
        }
        else
        {
            int length = cmdConcat.length();
            cmdConcat.remove(length - 6);
            static char json_response2[4096];
            char *p = json_response2;
            // *p++ = '';
            p += sprintf(p, "%s", cmdConcat.c_str());
            // *p++ = '';
            *p++ = 0;
            httpd_resp_set_type(req, "application/json");
            httpd_resp_set_hdr(req, "Access-Control-Allow-Origin", "*");
            return httpd_resp_send(req, json_response2, strlen(json_response2));
        }
    }

    else
    {
        res = -1;
    }

    if (res)
    {
        return httpd_resp_send_500(req);
    }

    httpd_resp_set_hdr(req, "Access-Control-Allow-Origin", "*");
    return httpd_resp_send(req, NULL, 0);
    if (debugmsg)
    {
        Serial.printf("Command issued");
    }
}

static esp_err_t status_handler(httpd_req_t *req)
{
    static char json_response[1024];

    // sensor_t *s = esp_camera_sensor_get();
    char *p = json_response;
    *p++ = '{';
    p += sprintf(p, "\"temperature\":%f", (temprature_sens_read() - 32) / 1.8);
    *p++ = '}';
    *p++ = 0;
    httpd_resp_set_type(req, "application/json");
    httpd_resp_set_hdr(req, "Access-Control-Allow-Origin", "*");
    return httpd_resp_send(req, json_response, strlen(json_response));
    if (debugmsg)
    {
        Serial.printf("Status sent");
    }
}

static esp_err_t index_handler(httpd_req_t *req)
{
    httpd_resp_set_type(req, "text/html");
    httpd_resp_set_hdr(req, "Content-Encoding", "gzip");
    if (debugmsg)
    {
        Serial.printf("Index loading");
    }

    // return httpd_resp_send(req, (const char *)INDEX2_HTML, strlen(INDEX2_HTML));
    return httpd_resp_send(req, (const char *)index_ov2640_html_gz, index_ov2640_html_gz_len);
}

void startCameraServer()
{
    httpd_config_t config = HTTPD_DEFAULT_CONFIG();

    httpd_uri_t index_uri = {
        .uri = "/",
        .method = HTTP_GET,
        .handler = index_handler,
        .user_ctx = NULL};

    httpd_uri_t status_uri = {
        .uri = "/status",
        .method = HTTP_GET,
        .handler = status_handler,
        .user_ctx = NULL};

    httpd_uri_t cmd_uri = {
        .uri = "/control",
        .method = HTTP_GET,
        .handler = cmd_handler,
        .user_ctx = NULL};

    httpd_uri_t stream_uri = {
        .uri = "/stream",
        .method = HTTP_GET,
        .handler = stream_handler,
        .user_ctx = NULL};

    Serial.printf("Starting web server on port: '%d'\n", config.server_port);
    if (httpd_start(&camera_httpd, &config) == ESP_OK)
    {
        httpd_register_uri_handler(camera_httpd, &index_uri);
        httpd_register_uri_handler(camera_httpd, &cmd_uri);
        httpd_register_uri_handler(camera_httpd, &status_uri);
    }

    config.server_port += 1;
    config.ctrl_port += 1;

    config.server_port = 9601; //stream port + also change this in the html-source in this file
                               // config.ctrl_port =8081;

    Serial.printf("Starting stream server on stream port: '%d'\n", config.server_port);
    if (httpd_start(&stream_httpd, &config) == ESP_OK)
    {
        httpd_register_uri_handler(stream_httpd, &stream_uri);
    }
}
